
int main(void)
{
  /* Declare volatile pointers to I/O registers (volatile means that the locations will not be cached,
  * even in registers) */

  volatile int * LED_ptr = (int *) 0xFF200040; // red LED address
  volatile int * HEX3_HEX0_ptr = (int *) 0xFF200020; // HEX3_HEX0 address
  volatile int * HEX5_HEX4_ptr = (int *) 0xFF200010; // HEX5_HEX4 address
  volatile int * SW_switch_ptr = (int *) 0xFF200030; // SW slider switch address
  volatile int * KEY_ptr = (int *) 0xFF200000; // pushbutton KEY address

 // int HEX_bits = 0x76; // initial pattern for HEX displays
  int SW_value;
  //volatile int delay_count; // volatile so C compiler does not remove loop
  
  while (1)
  {
    SW_value = *(SW_switch_ptr); // read the SW slider switch values
    *(LED_ptr) = SW_value; // light up the red LEDs
    
    if (*KEY_ptr != 0) // check if any KEY was pressed
    {
       //HEX_bits = SW_value; // set pattern using SW values
       while (*KEY_ptr != 0); // wait for pushbutton KEY release
    }
    //*(HEX3_HEX0_ptr) = HEX_bits; // display pattern on HEX3 ... HEX0
    *(HEX3_HEX0_ptr) = 0x3E;
    *(HEX3_HEX0_ptr) = 0x3F << 8;
    *(HEX3_HEX0_ptr) = 0x38 << 16;
    *(HEX3_HEX0_ptr) = 0x38 << 24;
    *(HEX5_HEX4_ptr) = 0x79;
    *(HEX5_HEX4_ptr) = 0x76 << 8;//HEX_bits;
    /* rotate the pattern shown on the HEX displays */
    //if (HEX_bits & 0x80000000)
   //   HEX_bits = (HEX_bits << 8) ;//| 1;
    //else
    //  HEX_bits = HEX_bits << 8;
    //for (delay_count = 1000000; delay_count != 0; --delay_count);
      //HEX_bits = HEX_bits << 8;
  }
}
